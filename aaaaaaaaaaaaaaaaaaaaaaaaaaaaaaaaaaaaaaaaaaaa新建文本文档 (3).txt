pair first,second 可以pari里面存pair

vector//变长数组
三种初始化方式
三种遍历方式	下标，iterator, auto
size(),empty(),clear(),
push_back(),pop_back(),
begin(),end(),
front(),back(),
支持比较，按照字典序比较
系统为某一程序分配空间时，与申请的大小无关，只与申请的次数有关
所以要尽量减少申请次数
 
string//字符串
substr(1,4)	打印第一个到第四个字符
cstr()

栈和队列这些都没有clear函数
queue//队列
push()	队尾插入
pop()	队头删除
front()	返回队头
back()	返回队尾
清空队列 为队列重新分配存储空间即可
queue<int> q;
q=queue<int>();

priority_queue//优先队列 默认是大根堆

手写堆

基本操作
假设heap为当前堆，size是堆里面的数量
1.插入一个数
heap[++size]=x;up(size);	//直接把这个数放在堆的最底下，然后进行up操作，让他上浮
2.求集合当中最小值
heap[1];	//对于小根堆，根节点就是堆中的最小值
3.删除最小值
heap[1]=heap[size];size--;down(1);
//先把堆的最后一个元素覆盖第一个元素，再把最后一个元素删了，再把第一个元素down操作
//因为删除第一个元素很困难，删除最后一个元素容易
堆是一棵完全二叉树（除了最后一行外，其他都是满的，最后一层要求从左到右排列）
小根堆 每个节点小于它的左右儿子，所以根节点是最小的节点
4.删除第k个元素
heap[k]=heap[size];size--;down(k);up(k);
堆的存储：用一维数组来存堆
下标得从1开始

左儿子:下标为2x,右儿子:下标为2x+1

down操作，把节点往下移动
up操作，把节点往上移动
down操作就是把大的沉下去，up操作就是把小的浮上去
